/*! @gera2ld/format-json v0.1.0 | MIT License */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var JSON5 = _interopDefault(require('json5'));

var MULTILINE = 'MULTILINE';
var SINGLELINE = 'SINGLELINE';
var KEY = 'KEY';
var COMMA = {
  type: 'comma',
  value: ','
};
var BR = {
  type: 'br',
  value: '\n'
};
var charMapBase = {
  '\\': '\\\\',
  '\r': '\\r',
  '\t': '\\t'
};

var charMapQuote = _extends({}, charMapBase, {
  '\'': '\\\'',
  '\n': '\\n'
});

var charMapTemplate = _extends({}, charMapBase, {
  '`': '\\`'
});

function quoteString(str, _ref) {
  var quote = _ref.quote,
      quoteAsNeeded = _ref.quoteAsNeeded,
      template = _ref.template;

  if (template && /\n/.test(str)) {
    var quoted = str.replace(/[\\`\r\t]/g, function (m) {
      return charMapTemplate[m];
    });
    return "`" + quoted + "`";
  }

  if (!quoteAsNeeded || /\W/.test(str)) {
    var re = new RegExp("[\\\\\\r\\n\\t" + quote + "]", 'g');

    var _quoted = str.replace(re, function (m) {
      return charMapQuote[m];
    });

    return quote + _quoted + quote;
  }

  return str;
}

function getSpace(level, indent) {
  return {
    type: 'space',
    value: ' '.repeat(indent * level)
  };
}

function render(data, options, level) {
  if (level === void 0) {
    level = 0;
  }

  if (Array.isArray(data)) {
    var arr = [];
    var ret = {
      type: MULTILINE,
      separator: [COMMA],
      data: arr
    };
    arr.push({
      value: '['
    });

    if (data.length) {
      var rendered = data.map(function (item) {
        return render(item, options, level + 1);
      });
      arr.push.apply(arr, (options.indent ? [BR] : []).concat([getSpace(level + 1, options.indent)], join(rendered, options, level + 1), options.indent ? [BR] : [], [getSpace(level, options.indent)]));
    } else {
      ret.type = SINGLELINE;
    }

    arr.push({
      value: ']'
    });
    return ret;
  }

  if (data === null) {
    return {
      type: SINGLELINE,
      separator: [COMMA],
      data: [{
        value: data,
        type: 'null'
      }]
    };
  }

  if (typeof data === 'object') {
    var _arr = [];
    var _ret = {
      type: MULTILINE,
      separator: [COMMA],
      data: _arr
    };

    _arr.push({
      value: '{'
    });

    var _rendered = Object.keys(data).map(function (key) {
      return [{
        type: KEY,
        data: [{
          value: quoteString(key, options),
          type: 'key'
        }],
        separator: [{
          value: ':'
        }]
      }, render(data[key], options, level + 1)];
    }).reduce(function (res, cur) {
      return [].concat(res, cur);
    }, []);

    if (_rendered.length) {
      _arr.push.apply(_arr, (options.indent ? [BR] : []).concat([getSpace(level + 1, options.indent)], join(_rendered, options, level + 1), options.indent ? [BR] : [], [getSpace(level, options.indent)]));
    } else {
      _ret.type = SINGLELINE;
    }

    _arr.push({
      value: '}'
    });

    return _ret;
  }

  return {
    type: SINGLELINE,
    separator: [COMMA],
    data: [{
      value: typeof data === 'string' ? quoteString(data, _extends({}, options, {
        quoteAsNeeded: false
      })) : data
    }]
  };
}

function join(rendered, options, level) {
  var arr = [];

  for (var i = 0; i < rendered.length; i += 1) {
    var item = rendered[i];
    var next = rendered[i + 1];
    if (item.data) arr.push.apply(arr, item.data); // trailing separators

    if (item.separator && (next || options.trailing)) {
      arr.push.apply(arr, item.separator);
    }

    if (next) {
      if (item.type === KEY) {
        if (options.indent) arr.push({
          value: ' '
        });
      } else {
        arr.push.apply(arr, (options.indent ? [BR] : []).concat([getSpace(level, options.indent)]));
      }
    }
  }

  return arr;
}

function format(input, options) {
  var obj = JSON5.parse(input);
  var rendered = render(obj, options);
  return (rendered.data || []).map(function (_ref2) {
    var value = _ref2.value;
    return "" + value;
  }).join('');
}

exports.format = format;
