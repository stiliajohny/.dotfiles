"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var coc_nvim_1 = require("coc.nvim");
var path_1 = require("path");
var Gitignore = /** @class */ (function () {
    function Gitignore(templatesPath) {
        var _this = this;
        this.templatesPath = templatesPath;
        this.name = 'gitignore';
        this.description = 'gitignore templates';
        this.defaultAction = 'append';
        this.actions = [];
        this.templateMap = new Map();
        this.isInit = false;
        var config = coc_nvim_1.workspace.getConfiguration('gitignore');
        var patch = config.get('templates.patch', {});
        var replace = config.get('templates.replace', {});
        this.actions.push({
            name: 'append',
            execute: function (item) { return __awaiter(_this, void 0, void 0, function () {
                var list, workdir, gitignore, targetPath, isWrite;
                var _this = this;
                return __generator(this, function (_a) {
                    list = [].concat(item);
                    workdir = coc_nvim_1.Uri.parse(coc_nvim_1.workspace.workspaceFolder.uri).fsPath;
                    gitignore = "# create by https://github.com/iamcco/coc-gitignore (" + new Date().toString() + ")";
                    list.forEach(function (item) {
                        var typeName = item.filterText;
                        if (replace[typeName]) {
                            gitignore += "\n# " + typeName + "-replace:\n" + replace[typeName];
                        }
                        else {
                            var data = _this.templateMap.get(typeName);
                            if (data) {
                                data.forEach(function (name) {
                                    gitignore += "\n# " + name + ":";
                                    var filePath = path_1.join(templatesPath, name);
                                    if (fs_1.existsSync(filePath)) {
                                        gitignore += "\n" + fs_1.readFileSync(filePath).toString();
                                    }
                                });
                            }
                        }
                        if (patch[typeName]) {
                            gitignore += "\n# " + typeName + "-patch:\n" + patch[typeName];
                        }
                    });
                    targetPath = path_1.join(workdir, '.gitignore');
                    if (fs_1.existsSync(targetPath)) {
                        gitignore = "\n" + gitignore;
                    }
                    isWrite = coc_nvim_1.workspace.showPrompt("Write gitignore rules to: " + targetPath + "?");
                    if (isWrite) {
                        fs_1.writeFileSync(path_1.join(workdir, '.gitignore'), gitignore, { flag: 'a' });
                    }
                    return [2 /*return*/];
                });
            }); }
        });
    }
    Gitignore.prototype.loadItems = function (_context) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, templates, list, _b, _c, key;
            var _this = this;
            return __generator(this, function (_d) {
                templates = fs_1.readdirSync(this.templatesPath) || [];
                if (!this.isInit) {
                    this.templateMap = new Map();
                    templates.forEach(function (name) {
                        var typeName = name.split('.')[0];
                        var data = _this.templateMap.get(typeName) || [];
                        if (data) {
                            data.push(name);
                        }
                        _this.templateMap.set(typeName, data);
                    });
                }
                list = [];
                try {
                    for (_b = __values(this.templateMap.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        key = _c.value;
                        list.push({
                            label: key + " " + (this.templateMap.get(key) || []).slice(1).join(', '),
                            filterText: key
                        });
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return [2 /*return*/, list];
            });
        });
    };
    return Gitignore;
}());
exports.default = Gitignore;
//# sourceMappingURL=gitignore.js.map