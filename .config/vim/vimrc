"""""""""""""""""""""""""""""""""""
" Vimrc configuration
"""""""""""""""""""""""""""""""""""""
set nocompatible
set number
set completeopt=menuone,noselect,noinsert
set nowritebackup
set nobackup
set nomodeline
set autoindent " Copy indent from last line when starting new line
set modelines=0             " Disable modelines as a security precaution
set autoread " Set to auto read when a file is changed from the outside
set backspace=indent,eol,start
set cursorline " Highlight current line
set expandtab " Expand tabs to spaces
set foldcolumn=0 " Column to show folds
set foldenable " Enable folding
set foldlevel=0 " Close all folds by default
set foldmethod=syntax " Syntax are used to specify folds
set noswapfile              " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set foldminlines=0 " Allow folding single lines
set foldnestmax=5 " Set max fold nesting level
set formatoptions=
set formatoptions+=c " Format comments
set formatoptions+=r " Continue comments by default
set formatoptions+=o " Make comment when using o or O from comment line
set formatoptions+=q " Format comments with gq
set formatoptions+=n " Recognize numbered lists
set formatoptions+=2 " Use indent from 2nd line of a paragraph
set formatoptions+=l " Don't break lines that are already long
set formatoptions+=1 " Break before 1-letter words
set gdefault " By default add g flag to search/replace. Add g to toggle
set guicursor= " Disable cursor style changes in Neovim
set hidden " When a buffer is brought to foreground, remember undo history and marks
set history=5000 " Increase history from 20 default
set hlsearch " Highlight searches
set ignorecase
set incsearch " Highlight dynamically as pattern is typed
set laststatus=2 " Always show status line
set lazyredraw " Don't redraw when we don't have to, speed up on large files
set lispwords+=defroutes " Compojure
set lispwords+=defpartial,defpage " Noir core
set lispwords+=defaction,deffilter,defview,defsection " Ciste core
set lispwords+=describe,it " Speclj TDD/BDD
set shiftround              " round indent to multiple of 'shiftwidth' (for << and >>)"
set shiftwidth=2            " indent size for << and >>
set magic " Enable extended regexes
set mouse=a " Enable mouse in all in all modes
set showcmd                 " display incomplete commands
set textwidth=0             " disable auto break long lines
set undoreload=100000       " maximum number lines to save for undo on a buffer reload
set noerrorbells " Disable error bells
set colorcolumn=80,140
set clipboard=unnamedplus
set nojoinspaces " Only insert single space after a '.', '?' and '!' with a join command
set noshowmode " Don't show the current mode (airline.vim takes care of us), keep command line clean
set nostartofline " Don't reset cursor to start of line when moving around
set nowrap " Do not wrap lines
set ofu=syntaxcomplete#Complete " Set omni-completion method
set regexpengine=1 " Use the old regular expression engine (it's faster for certain language syntaxes)
set report=0 " Show all changes
set ruler " Show the cursor position
set virtualedit=onemore     " allow the cursor to move just past the end of the line"
set visualbell
set scrolloff=3 " Start scrolling three lines before horizontal border of window
set shell=zsh               " set default shell for vim operations
set shiftwidth=4 " The # of spaces for indenting
set softtabstop=4
set shortmess+=c  " Don't show the intro message when starting vim
set showtabline=2 " Always show tab bar
set sidescrolloff=3 " Start scrolling three columns before vertical border of window
set smartcase " Ignore 'ignorecase' if search patter contains uppercase characters
set smarttab " At start of line, <Tab> inserts shiftwidth spaces, <Bs> deletes shiftwidth spaces
set splitbelow " New window goes below
set splitright " New windows goes right
set suffixes=.bak,~,.swp,.swo,.o,.d,.info,.aux,.log,.dvi,.pdf,.bin,.bbl,.blg,.brf,.cb,.dmg,.exe,.ind,.idx,.ilg,.inx,.out,.toc,.pyc,.pyd,.dll
set switchbuf=""
set ttyfast " Send more characters at a given time
set undofile " Persistent Undo
set visualbell " Use visual bell instead of audible bell (annnnnoying)
set wildchar=<TAB> " Character for CLI expansion (TAB-completion)
set wildignore+=.DS_Store
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/bower_components/*,*/node_modules/*
set wildignore+=*/smarty/*,*/vendor/*,*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*,*/doc/*,*/source_maps/*,*/dist/*
set wildmenu " Hitting TAB in command mode will show possible completions above command line
set wildmode=list:longest " Complete only until point of ambiguity
set winminheight=0 " Allow splits to be reduced to a single line
set wrapscan " Searches wrap around end of file

" Colors, Fonts, and Syntax.
filetype plugin indent on
syntax enable
set t_Co=256
highlight Pmenu ctermbg=gray guibg=gray
let mapleader = '\'
set encoding=utf-8

" Directories.
set undodir=$XDG_DATA_HOME/vim/undo
set directory=$XDG_DATA_HOME/vim/swap
set backupdir=$XDG_DATA_HOME/vim/backup

set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
set list listchars=tab:\|·,trail:·,nbsp:· " Display extra whitespace

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" START Plug Configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Specify a directory for plugins
call plug#begin('$HOME/.config/vim/plugged')

" Utility

Plug 'scrooloose/nerdtree'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'  "to highlight files in nerdtree
Plug 'Xuyuanp/nerdtree-git-plugin' " addition of git status
Plug 'majutsushi/tagbar'
Plug 'ervandew/supertab'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'godlygeek/tabular'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'benmills/vimux'

" Generic Programming Support
Plug 'Townk/vim-autoclose'

" Markdown / Writting
Plug 'reedes/vim-pencil'
Plug 'tpope/vim-markdown'
Plug 'jtratner/vim-flavored-markdown'

" Git Support
Plug 'kablamo/vim-git-log'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'  " show git changes to files in gutter

" Python Support
Plug 'hdima/python-syntax' "Python syntax
Plug 'vim-scripts/indentpython.vim'
Plug 'Vimjas/vim-python-pep8-indent'  "better indenting for python
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

" Theme / Interface
Plug 'itchyny/lightline.vim'
Plug 'vim-scripts/desert256.vim'
Plug 'rainux/vim-desert-warm-256'
Plug 'jnurmine/Zenburn'
Plug 'arcticicestudio/nord-vim'
Plug 'mhinz/vim-startify'
Plug 'ryanoasis/vim-devicons'

" Vim Native Plugins
Plug 'vimwiki/vimwiki'  " vim WiKi, enable with <leader>ndwt
Plug 'dpelle/vim-LanguageTool'
Plug 'liuchengxu/vim-which-key' " displays available keybindings in popup

" Terraform Plugins
Plug 'hashivim/vim-terraform'
Plug 'juliosueiras/vim-terraform-completion'
Plug 'jgerry/terraform-vim-folding'

" Go Programming
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }


" Other Plugins
Plug 'w0rp/ale' " linting and parsing plugin
Plug 'frazrepo/vim-rainbow' " rainbow Matching brackets
Plug 'ekalinin/dockerfile.vim' " Dockerfile syntax
Plug 'chrisbra/csv.vim' "CSV beautifly
Plug 'mboughaba/i3config.vim' " i3 config edit
Plug 'roxma/nvim-yarp'
Plug 'tweekmonster/impsort.vim'  " color and sort imports
Plug 'roxma/nvim-yarp'  " dependency of ncm2
Plug 'prettier/vim-prettier', { 'do': 'yarn install' } "install Prettier which auto format the text
Plug 'hail2u/vim-css3-syntax'
Plug 'ap/vim-css-color'
Plug 'MicahElliott/Rocannon'
Plug 'kristijanhusak/vim-carbon-now-sh'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vim-syntastic/syntastic'
Plug 'mattn/calendar-vim'
Plug 'pearofducks/ansible-vim'

" Initialize plugin system
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configuration Section
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd VimEnter *
            \   if !argc()
            \ |   Startify
            \ |   NERDTree
            \ |   wincmd w
            \ | endif

highlight UnwanttedTab ctermbg=red guibg=darkred
highlight TrailSpace guibg=red ctermbg=darkred
match UnwanttedTab /\t/
match TrailSpace / \+$/

let g:tagbar_sort = get(g:, 'tagbar_sort', 1)
let g:tagbar_compact = get(g:, 'tagbar_compact', 1)
let g:tagbar_map_showproto = get(g:, 'tagbar_map_showproto', '')
let g:tagbar_iconchars = ['▶', '▼']

" Coc Configuration
let g:coc_global_extensions = [
    \ 'coc-css',
    \ 'coc-cssmodules',
    \ 'coc-emmet',
    \ 'coc-emoji',
    \ 'coc-explorer',
    \ 'coc-floaterm',
    \ 'coc-html',
    \ 'coc-java',
    \ 'coc-java-debug',
    \ 'coc-json',
    \ 'coc-lists',
    \ 'coc-marketplace',
    \ 'coc-pairs',
    \ 'coc-prettier',
    \ 'coc-pyright',
    \ 'coc-python',
    \ 'coc-sh',
    \ 'coc-snippets',
    \ 'coc-svg',
    \ 'coc-tasks',
    \ 'coc-tsserver',
    \ 'coc-vimlsp',
    \ 'coc-xml',
    \ 'coc-yaml',
    \ 'coc-yank',
    \ ]
" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
" Carbon.sh
noremap <silent> <Leader>carbon :CarbonNowSh<CR>
let g:carbon_now_sh_options =
            \ { 'ln': 'true',
            \ 'fm': 'Source Code Pro',
            \ 'theme': 'nord',
            \ 'lineNumbers': 'true' }
" Color scheme
colorscheme desert256

"enable rainbow
let g:rainbow_active = 1

" Terraform Plugin Config
let g:terraform_align=1
let g:terraform_fold_sections=1
let g:terraform_fmt_on_save=1

" NerdTree Config
let g:NERDTreeWinPos = "left"
let NERDTreeShowHidden=0
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeMinimalUI = 1
let g:NERDTreeHijackNetrw = 0
let NERDTreeQuitOnOpen = 1
let g:NERDTreeWinSize = 31
let g:NERDTreeChDirMode = 2
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeCascadeOpenSingleChildDir = 1
"Nerdtree Git PLug in
let g:NERDTreeGitStatusIndicatorMapCustom = { "Modified"  : "✹",
                                            \"Staged"    : "✚",
                                            \"Untracked" : "✭",
                                            \"Renamed"   : "➜",
                                            \"Unmerged"  : "═",
                                            \"Deleted"   : "✖",
                                            \"Dirty"     : "✗",
                                            \"Clean"     : "✔︎",
                                            \'Ignored'   : '☒',
                                            \"Unknown"   : "?" }


" wrap toggle

setlocal nowrap
noremap <silent> <Leader>wr :call ToggleWrap()<CR>
function ToggleWrap()
    if &wrap
        echo "Wrap OFF"
        setlocal nowrap
        set virtualedit=all
        silent! nunmap <buffer> <Up>
        silent! nunmap <buffer> <Down>
        silent! nunmap <buffer> <Home>
        silent! nunmap <buffer> <End>
        silent! iunmap <buffer> <Up>
        silent! iunmap <buffer> <Down>
        silent! iunmap <buffer> <Home>
        silent! iunmap <buffer> <End>
    else
        echo "Wrap ON"
        setlocal wrap linebreak nolist
        set virtualedit=
        setlocal display+=lastline
        noremap  <buffer> <silent> <Up>   gk
        noremap  <buffer> <silent> <Down> gj
        noremap  <buffer> <silent> <Home> g<Home>
        noremap  <buffer> <silent> <End>  g<End>
        inoremap <buffer> <silent> <Up>   <C-o>gk
        inoremap <buffer> <silent> <Down> <C-o>gj
        inoremap <buffer> <silent> <Home> <C-o>g<Home>
        inoremap <buffer> <silent> <End>  <C-o>g<End>
    endif
endfunction


" mouse
set mouse=a
let g:is_mouse_enabled = 1
noremap <silent> <Leader>m :call ToggleMouse()<CR>
function ToggleMouse()
    if g:is_mouse_enabled == 1
        echo "Mouse OFF"
        set mouse=
        let g:is_mouse_enabled = 0
    else
        echo "Mouse ON"
        set mouse=a
        let g:is_mouse_enabled = 1
    endif
endfunction

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"Ansible-vim PLugin Config
augroup ansible_vim_fthosts
    autocmd!
    autocmd BufNewFile,BufRead hosts setfiletype yaml.ansible
augroup END
au BufRead,BufNewFile */playbooks/*.yml set filetype=yaml.ansible

" Markdown Syntax Support
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" Automaticaly open Tagbar
autocmd VimEnter * nested :TagbarOpen
" Prettier Configuration
let g:prettier#exec_cmd_path = "/usr/bin/prettier"
let g:prettier#autoformat = 0
let g:prettier#config#single_quote = 'true'
let g:prettier#config#bracket_spacing = 'false'
let g:prettier#config#parser = 'flow'
let g:prettier#quickfix_enabled = 0
let g:formatterpath = ['/usr/bin/shfmt']

" Ale Fixers
let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
let g:ale_fixers = {'*': ['remove_trailing_lines', 'trim_whitespace']}
let g:ale_fix_on_save = 1
let g:ale_linters = {
            \   'javascript': ['jshint'],
            \   'python': ['flake8'],
            \   'go': ['go', 'golint', 'errcheck']
            \}

" Ale Configuration
let g:ale_python_flake8_options = '--ignore=E129,E501,E302,E265,E241,E305,E402,W503,W391'
let g:ale_python_pylint_options = '-j 0 --max-line-length=140'
let g:ale_list_window_size = 4
let g:ale_sign_column_always = 0
let g:ale_open_list = 1
let g:ale_keep_list_window_open = '1'
let g:ale_sign_error = '‼'
let g:ale_sign_warning = '∙'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = '0'
let g:ale_lint_on_save = '1'

" Python Configuration
let python_highlight_all=1
let g:pymode_options_max_line_length = 140
let g:pymode_lint_options_pep8 = {'max_line_length': g:pymode_options_max_line_length}
let g:pymode_options_colorcolumn = 1
au BufNewFile,BufRead *.py
    \set tabstop=4
    \set softtabstop=4
    \set shiftwidth=4
    \set textwidth=79
    \set expandtab
    \set autoindent
    \set fileformat=unix
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match TrailSpace /\s\+$/

" Go Configuration
au filetype go inoremap <buffer> . .<C-x><C-o>
" Also run `goimports` on your current file on every save
" Might be be slow on large codebases, if so, just comment it out
let g:go_fmt_command = "goimports"
" Status line types/signatures.
let g:go_auto_type_info = 1
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_metalinter_autosave = 1
let g:go_metalinter_deadline = "5s"
let g:go_metalinter_command = 'gopls'
let g:go_gopls_staticcheck = 0

" set CSV plugin config
let g:csv_delim=','

"  Shebang line automatically generated
augroup Shebang
    autocmd BufNewFile *.py 0put =\"#!/usr/bin/env python\<nl># -*- coding: iso-8859-15 -*-\<nl>\"|$
    autocmd BufNewFile *.rb 0put =\"#!/usr/bin/env ruby\<nl># -*- coding: None -*-\<nl>\"|$
    autocmd BufNewFile *.sh 0put =\"#!/usr/bin/env bash\<nl># -*- coding: None -*-\<nl>\"|$
    autocmd BufNewFile *.tex 0put =\"%&plain\<nl>\"|$
    autocmd BufNewFile *.\(yml\|yaml\) 0put =\"---\<nl>\"|$
    autocmd BufNewFile *.\(cc\|hh\) 0put =\"//\<nl>// \".expand(\"<afile>:t\").\" -- \<nl>//\<nl>\"|2|start!
augroup END


" Vim Wiki

" VimWiki
  let g:vimwiki_key_mappings =
    \ {
    \   'all_maps': 1,
    \   'global': 1,
    \   'headers': 1,
    \   'text_objs': 1,
    \   'table_format': 1,
    \   'table_mappings': 1,
    \   'lists': 1,
    \   'links': 1,
    \   'html': 1,
    \   'mouse': 1,
    \ }

" Filetypes enabled for
let g:vimwiki_filetypes = ['markdown']
let g:vimwiki_list = [{'path': '~/.config/vim/vimwiki',
                      \ 'syntax': 'markdown', 'ext': '.md', 'exclude_files': ['**/README.md', '**/Readme.md'] }]
 let g:vimwiki_auto_header = 1
" let g:vimwiki_markdown_header_style = 1
" let g:vimwiki_tags_header_level = 1
" let g:vimwiki_tags_header = 'Generated Tags'
" let g:vimwiki_links_header_level = 1
" let g:vimwiki_links_header = 'Generated Links'
" let g:vimwiki_auto_chdir = 0
" let g:vimwiki_map_prefix = '<Leader>w'
" let g:vimwiki_toc_link_format = 0
" let g:vimwiki_toc_header_level = 1
 let g:vimwiki_toc_header = 'Contents'
" let g:vimwiki_autowriteall = 1
" let g:vimwiki_conceal_pre = 0
" let g:vimwiki_conceal_onechar_markers = 1
" let g:vimwiki_conceallevel = 2
" let g:vimwiki_user_htmls = ''
" let g:vimwiki_valid_html_tags = 'b,i,s,u,sub,sup,kbd,br,hr'
 let g:vimwiki_html_header_numbering_sym = ''
" let g:vimwiki_html_header_numbering = 0
" let g:vimwiki_dir_link = ''
" let g:vimwiki_markdown_link_ext = 0
" let g:vimwiki_create_link = 1
" let g:vimwiki_use_calendar = 1
" let g:vimwiki_text_ignore_newline = 1
" let g:vimwiki_list_ignore_newline = 1
" let g:vimwiki_folding = ''
" let g:vimwiki_listsym_rejected = '✗'
 let g:vimwiki_listsyms = '✗○◐●✓'
" let g:vimwiki_global_ext = 1
" let g:vimwiki_hl_cb_checked = 0
let g:vimwiki_diary_months = {
      \ 1: 'January', 2: 'February', 3: 'March',
      \ 4: 'April', 5: 'May', 6: 'June',
      \ 7: 'July', 8: 'August', 9: 'September',
      \ 10: 'October', 11: 'November', 12: 'December'
      \ }
" Teraform Config
let g:terraform_align=1
let g:terraform_fold_sections=1
let g:terraform_fmt_on_save=1
let g:syntastic_terraform_tffilter_plan = 1
let g:terraform_completion_keys = 1
let g:terraform_registry_module_completion = 0
au BufRead,BufNewFile *.tf* set filetype=terraform "make a filetype category
au BufWrite terraform :TerraformFmt " autocommand on this filetype



let g:lightline = {
      \ 'colorscheme': 'default',
      \ 'active': {
      \   'left': [
      \     [ 'mode', 'paste' ],
      \     [ 'fugitive',   'readonly', 'filename', 'modified' ]
      \   ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'readonly': 'LightlineReadonly',
      \   'modified': 'LightlineModified',
      \   'filename': 'LightlineFilename',
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ 'separator': {
      \   'left': '',
      \   'right': ''
      \ },
      \ 'subseparator': {
      \   'left': '',
      \   'right': ''
      \ }
   \ }

function! LightlineModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "+"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction

function! LightlineReadonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return ""
    else
        return ""
    endif
endfunction

function! LightlineFugitive()
    if exists("*fugitive#head")
        let branch = fugitive#head()
        return branch !=# '' ? ' '.branch : ''
    endif
    return ''
endfunction

function! LightlineFilename()
    return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

" Starify

let g:startify_change_to_vcs_root = 1
let g:startify_enable_special = 0
let g:startify_fortune_use_unicode = 1
let g:startify_session_autoload = 1
let g:startify_session_delete_buffers = 1
let g:startify_session_persistence = 1
let g:webdevicons_enable_startify = 1
let g:startify_session_dir = '~/.config/vim/sessions'
let g:startify_session_before_save = [
	\ 'echo "Cleaning up before saving..."',
	\ 'silent! NERDTreeClose'
	\ ]
function! StartifyEntryFormat()
        return 'WebDevIconsGetFileTypeSymbol(absolute_path) ." ". entry_path'
endfunction

let g:startify_bookmarks = [
            \ { 't': '~/.config/tmux/tmux.conf' },
            \ { 'i': '~/.config/i3/config' },
            \ { 'v': '~/.config/vim/vimrc' },
            \ { 'p': '~/.config/polybar/config' },
            \ { 'z': '~/.zshrc' },
            \ ]

let g:startify_enable_special = 0


let g:startify_custom_header = [
    \ '       /$$                 /$$   /$$           /$$                   /$$     /$$                         ',
    \ '      | $$                |__/  | $$          | $$                  | $$    | $$                         ',
    \ '  /$$$$$$$  /$$$$$$        /$$ /$$$$$$        | $$$$$$$   /$$$$$$  /$$$$$$ /$$$$$$    /$$$$$$   /$$$$$$  ',
    \ ' /$$__  $$ /$$__  $$      | $$|_  $$_/        | $$__  $$ /$$__  $$|_  $$_/|_  $$_/   /$$__  $$ /$$__  $$ ',
    \ '| $$  | $$| $$  \ $$      | $$  | $$          | $$  \ $$| $$$$$$$$  | $$    | $$    | $$$$$$$$| $$  \__/ ',
    \ '| $$  | $$| $$  | $$      | $$  | $$ /$$      | $$  | $$| $$_____/  | $$ /$$| $$ /$$| $$_____/| $$       ',
    \ '|  $$$$$$$|  $$$$$$/      | $$  |  $$$$/      | $$$$$$$/|  $$$$$$$  |  $$$$/|  $$$$/|  $$$$$$$| $$       ',
    \ ' \_______/ \______/       |__/   \___/        |_______/  \_______/   \___/   \___/   \_______/|__/       ',
    \ ]
let g:startify_custom_footer = [
    \ '   /$$     /$$                                 /$$                       /$$             /$$     /$$                             ' ,
    \ '  | $$    | $$                                | $$                      | $$            | $$    |__/                             ' ,
    \ ' /$$$$$$  | $$$$$$$   /$$$$$$  /$$$$$$$       | $$  /$$$$$$   /$$$$$$$ /$$$$$$         /$$$$$$   /$$ /$$$$$$/$$$$   /$$$$$$      ' ,
    \ '|_  $$_/  | $$__  $$ |____  $$| $$__  $$      | $$ |____  $$ /$$_____/|_  $$_/        |_  $$_/  | $$| $$_  $$_  $$ /$$__  $$     ' ,
    \ '  | $$    | $$  \ $$  /$$$$$$$| $$  \ $$      | $$  /$$$$$$$|  $$$$$$   | $$            | $$    | $$| $$ \ $$ \ $$| $$$$$$$$     ' ,
    \ '  | $$ /$$| $$  | $$ /$$__  $$| $$  | $$      | $$ /$$__  $$ \____  $$  | $$ /$$        | $$ /$$| $$| $$ | $$ | $$| $$_____/     ' ,
    \ '  |  $$$$/| $$  | $$|  $$$$$$$| $$  | $$      | $$|  $$$$$$$ /$$$$$$$/  |  $$$$/        |  $$$$/| $$| $$ | $$ | $$|  $$$$$$$     ' ,
    \ '   \___/  |__/  |__/ \_______/|__/  |__/      |__/ \_______/|_______/    \___/           \___/  |__/|__/ |__/ |__/ \_______/     ' ,
    \ ]
function! s:gitModified()
    let files = systemlist('git ls-files -m 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction

" same as above, but show untracked files, honouring .gitignore
function! s:gitUntracked()
    let files = systemlist('git ls-files -o --exclude-standard 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction
let g:startify_lists = [
          \ { 'type': 'files',     'header': ['   Files']                        },
          \ { 'type': 'dir',       'header': ['   Current Directory '. getcwd()] },
          \ { 'type': 'sessions',  'header': ['   Sessions']                     },
          \ { 'type': 'bookmarks', 'header': ['   Bookmarks']                    },
        \ { 'type': function('s:gitModified'),  'header': ['   Git Modified']},
        \ { 'type': function('s:gitUntracked'), 'header': ['   Git Untracked']},
        \ { 'type': 'commands',  'header': ['   Commands']       },
          \ ]

" Syntastic.
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_phpcs_disable = 1
let g:syntastic_phpmd_disable = 1
let g:syntastic_php_checkers = ['php']
let g:syntastic_quiet_messages = { "type": "style" }
let g:syntastic_aggregate_errors = 1
let g:syntastic_auto_jump = 2
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Ansible Highliter
let g:ansible_name_highlight = 'd'
let g:ansible_normal_keywords_highlight = 'Constant'
let g:ansible_extra_keywords_highlight = 1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keyboard mapping
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <leader>n :NERDTreeToggle<CR>

" move through split windows
nmap <leader><Up> :wincmd k<CR>
nmap <leader><Down> :wincmd j<CR>
nmap <leader><Left> :wincmd h<CR>
nmap <leader><Right> :wincmd l<CR>

"Remove all trailing whitespace by pressing C-S
nnoremap <C-s> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

"auto indent for brackets
nmap <leader>Q :lcl<cr>:q<cr>
nnoremap <leader>H :nohlsearch<Bar>:echo<CR>-


" FZF config
let g:fzf_nvim_statusline = 1
nnoremap <silent> <leader>f :FZF<CR>
"
" Switch between tabs
nmap <leader>1 1gt
nmap <leader>2 2gt
nmap <leader>3 3gt
nmap <leader>4 4gt
nmap <leader>5 5gt
nmap <leader>6 6gt
nmap <leader>7 7gt
nmap <leader>8 8gt
nmap <leader>9 9gt
" Toggle Booleans
noremap leader><r :ToggleBool<CR>
" Open New tab by leader<Enter>
nnoremap <silent> <leader><Enter> :tabnew<CR>
" Open tig
nnoremap <Leader>gg :tabnew<CR>:terminal tig<CR>
" Enable folding with the spacebar
nnoremap <space> za
let g:SimpylFold_docstring_preview=1
" tag list
map <leader>t :TagbarToggle<CR>
" Hard mode Enabled

" Other Random Config
" indent/unindent with tab/shift-tab
nmap <Tab> >>
imap <S-Tab> <Esc><<i
nmap <S-tab> <<


function! TogglePaste()
    if(&paste == 0)
        set paste
        echo "Paste Mode Enabled"
    else
        set nopaste
        echo "Paste Mode Disabled"
    endif
endfunction

map <leader>p :call TogglePaste()<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom Commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command Wdiff :w !diff % -
command W :w !sudo tee %
